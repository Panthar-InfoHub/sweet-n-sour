// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_ROLE {
  USER
  ADMIN
}

model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean        @default(false)
  image         String?
  role          USER_ROLE      @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  orders        Order[]
  addresses     Address[]
  couponUsages  CouponUsage[]
  wishlistItems WishlistItem[]
  reviews       Review[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// E-commerce Models

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("category")
}

model Product {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  description   String
  images        String[]       @default([])
  categoryId    String
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  variants      Json // Array of {weight, price, compareAtPrice, stockQuantity, inStock}
  isFeatured    Boolean        @default(false)
  isBestSeller  Boolean        @default(false)
  isOnSale      Boolean        @default(false)
  tags          String[]       @default([])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  reviews       Review[]

  @@map("product")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
  @@index([productId])
  @@index([userId])
  @@map("review")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  FAILED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model Order {
  id          String @id @default(cuid())
  orderNumber String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  status OrderStatus @default(PENDING)

  couponCode String?

  subtotal    Float // sum of items
  discount    Float @default(0) // total discount applied (from coupon or other)
  taxAmount   Float @default(0)
  shippingFee Float @default(0)
  total       Float // subtotal - discount + tax + shipping

  shippingAddress Json
  billingAddress  Json

  paymentStatus PaymentStatus @default(PENDING)

  razorpayOrderId   String? // From Razorpay createOrder
  razorpayPaymentId String? // From Razorpay payment callback
  paymentMethod     String?
  paymentCapturedAt DateTime?
  paymentMeta       Json?

  items OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order")
}

model OrderItem {
  id             String   @id @default(cuid())
  orderId        String
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId      String
  product        Product  @relation(fields: [productId], references: [id])
  name           String
  variantDetails Json // {weight, price}
  quantity       Int
  image          String?
  createdAt      DateTime @default(now())

  @@map("order_item")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String
  phone     String
  email     String?
  address   String
  apartment String?
  country   String   @default("India")
  state     String
  city      String
  pinCode   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("address")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique // null for guest carts
  sessionId String?    @unique // for guest users
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("cart")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  weight    String // variant identifier
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, weight])
  @@map("cart_item")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlist_item")
}

enum CouponType {
  PERCENTAGE
  FLAT
}

model Coupon {
  id            String     @id @default(cuid())
  code          String     @unique
  type          CouponType
  value         Float // % or flat amount
  minOrderValue Float? // optional minimum order to apply
  maxDiscount   Float? // optional cap for percentage coupons

  isActive  Boolean   @default(true)
  expiresAt DateTime? // null = infinite validity

  globalUsageLimit Int? // null = unlimited
  perUserLimit     Int? // null = unlimited

  totalUsed    Int           @default(0)
  usageHistory CouponUsage[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model CouponUsage {
  id        String   @id @default(cuid())
  couponId  String
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  usedCount Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([couponId, userId])
  @@index([couponId])
  @@index([userId])
}

model CMSPage {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  content         String
  metaTitle       String?
  metaDescription String?
  isPublished     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("cms_page")
}
